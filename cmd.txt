いい質問です💡
`cmd.exe /c`（C コマンド）で実行できる、**ファイル作成・削除**の基本コマンドは以下の通りです。
どれも Windows 標準で使えます。

---

## 🧩 ファイル作成コマンド

### ① `echo` を使う（最も簡単）

```cmd
cmd /c "echo Hello World > C:\Temp\test.txt"
```

* `>` で新規作成または上書き
* `>>` で追記

例：追記するなら

```cmd
cmd /c "echo More text >> C:\Temp\test.txt"
```

---

### ② `type nul` で空ファイルを作る

```cmd
cmd /c "type nul > C:\Temp\empty.txt"
```

* 中身が空のファイルを作成
* `echo.` より確実に「空」ファイルになります

---

### ③ `fsutil`（システム管理者権限が必要）

```cmd
cmd /c "fsutil file createnew C:\Temp\dummy.txt 0"
```

* 0 はバイト数。任意のサイズのダミーファイルを作れる
* 例：1MBファイル → `1048576`

---

## 🧩 ファイル削除コマンド

### ① `del`

```cmd
cmd /c "del /q C:\Temp\test.txt"
```

* `/q` … quiet（確認なし）
* `del /q /f` … 読み取り専用でも削除
* `del /q C:\Temp\*.log` … パターン削除

---

### ② `erase`（del と同じ）

```cmd
cmd /c "erase /q C:\Temp\*.tmp"
```

---

### ③ PowerShell 経由でも可能（ファイル／フォルダ両対応）

```cmd
cmd /c "powershell -Command Remove-Item 'C:\Temp\test.txt' -Force"
```

---

## ✅ まとめ

| 操作            | コマンド例                                                    | 備考        |
| ------------- | -------------------------------------------------------- | --------- |
| ファイル作成（文字入り）  | `cmd /c "echo Hello > C:\Temp\a.txt"`                    | テキスト入りで作る |
| 空ファイル作成       | `cmd /c "type nul > C:\Temp\a.txt"`                      | 空のファイル    |
| 指定サイズで作成      | `cmd /c "fsutil file createnew C:\Temp\a.txt 1024"`      | 1KBのダミー   |
| ファイル削除        | `cmd /c "del /q C:\Temp\a.txt"`                          | 確認なし削除    |
| PowerShell版削除 | `cmd /c "powershell Remove-Item 'C:\Temp\a.txt' -Force"` | 管理者でも安全   |

---

もしこれを **C# の `ProcessStartInfo.Arguments`** で使いたい場合は、
ファイルパスのバックスラッシュを `\\` にして書けばそのまま使えます。

例：

```csharp
Arguments = "/c type nul > C:\\Temp\\empty.txt";
```

---

どんな目的のファイル操作を想定していますか？（例：ログ生成、存在チェック、テンポラリなど）
それに合わせて安全な構文を出せます。

完璧です ✅
つまりやりたいことは：

> **「ファイルが存在すれば削除、存在しなければ新規作成」**

ですね。
`cmd.exe /c` でこれを 1 行で安全に実行する方法を紹介します。

---

## ✅ 1️⃣ 純粋な cmd 版（PowerShellなし）

```cmd
cmd /c "if exist C:\Temp\test.txt (del /q C:\Temp\test.txt) else (type nul > C:\Temp\test.txt)"
```

📘説明：

* `if exist <path> (...) else (...)`
* `del /q` → 確認なしで削除
* `type nul >` → 空ファイルを新規作成

---

### 🔹 C# の `ProcessStartInfo` で書く場合

```csharp
Arguments = "/c if exist \"C:\\Temp\\test.txt\" (del /q \"C:\\Temp\\test.txt\") else (type nul > \"C:\\Temp\\test.txt\")";
```

---

## ✅ 2️⃣ PowerShell 版（より柔軟・読みやすい）

```cmd
cmd /c "powershell -NoProfile -Command \"if (Test-Path 'C:\Temp\test.txt') { Remove-Item 'C:\Temp\test.txt' -Force } else { New-Item 'C:\Temp\test.txt' -ItemType File | Out-Null }\""
```

📘説明：

* `Test-Path` → 存在チェック
* `Remove-Item` → 削除
* `New-Item` → ファイル作成

---

### 🔹 C# で PowerShell 版を使う場合

```csharp
Arguments = "/c powershell -NoProfile -Command \"if (Test-Path 'C:\\Temp\\test.txt') { Remove-Item 'C:\\Temp\\test.txt' -Force } else { New-Item 'C:\\Temp\\test.txt' -ItemType File | Out-Null }\"";
```

---

## ✅ 3️⃣ 実行結果を出力で確認したい場合

確認用に出力メッセージを追加できます：

```cmd
cmd /c "if exist C:\Temp\test.txt (del /q C:\Temp\test.txt & echo Deleted) else (type nul > C:\Temp\test.txt & echo Created)"
```

C#なら：

```csharp
Arguments = "/c if exist \"C:\\Temp\\test.txt\" (del /q \"C:\\Temp\\test.txt\" & echo Deleted) else (type nul > \"C:\\Temp\\test.txt\" & echo Created)";
```

👉 出力例：

```
Created
```

または

```
Deleted
```

---

## 🔧 まとめ

| 方法          | 内容                                             | 備考         |
| ----------- | ---------------------------------------------- | ---------- |
| CMD版        | `if exist ... (del) else (type nul >)`         | 軽量・標準のみ    |
| PowerShell版 | `if (Test-Path) {Remove-Item} else {New-Item}` | 柔軟で安全      |
| 出力つき        | `& echo ...`                                   | 状況ログが見たいとき |

---

どちらを採用しますか？

* ⚙️ **cmd純正のみ（軽量）**
* 🪟 **PowerShell（堅牢＆読みやすい）**

はい、もちろんできます 👍
フォルダごと削除（中のファイルも含む）には、**CMD 版**と**PowerShell 版**の2通りがあります。
それぞれ「存在チェック → 削除 or 作成」も1行でできます。

---

## ✅ CMD 版（フォルダ内ファイルも含めて削除）

```cmd
cmd /c "if exist C:\Temp\TestDir (rd /s /q C:\Temp\TestDir) else (mkdir C:\Temp\TestDir)"
```

### 💡説明

* `rd`（または `rmdir`）… ディレクトリ削除コマンド
* `/s` … サブフォルダ・ファイル含めて削除
* `/q` … 確認なし（quiet）
* `mkdir` … ディレクトリ新規作成

---

### 🔹 C# の `ProcessStartInfo` 用

```csharp
Arguments = "/c if exist \"C:\\Temp\\TestDir\" (rd /s /q \"C:\\Temp\\TestDir\") else (mkdir \"C:\\Temp\\TestDir\")";
```

これで：

* `C:\Temp\TestDir` が存在すれば → 中身ごと削除
* 存在しなければ → 新しく作成

---

## ✅ PowerShell 版（より強力で柔軟）

```cmd
cmd /c "powershell -NoProfile -Command \"if (Test-Path 'C:\Temp\TestDir') { Remove-Item 'C:\Temp\TestDir' -Recurse -Force } else { New-Item 'C:\Temp\TestDir' -ItemType Directory | Out-Null }\""
```

### 💡説明

* `Test-Path` … 存在チェック
* `Remove-Item -Recurse -Force` … 中身をすべて削除（フォルダ含む）
* `New-Item -ItemType Directory` … ディレクトリ作成

---

### 🔹 C# で使うなら

```csharp
Arguments = "/c powershell -NoProfile -Command \"if (Test-Path 'C:\\Temp\\TestDir') { Remove-Item 'C:\\Temp\\TestDir' -Recurse -Force } else { New-Item 'C:\\Temp\\TestDir' -ItemType Directory | Out-Null }\"";
```

---

## ✅ 出力で確認したい場合（オプション）

ログを見たい場合は `echo` を追加できます。

```cmd
cmd /c "if exist C:\Temp\TestDir (rd /s /q C:\Temp\TestDir & echo Deleted) else (mkdir C:\Temp\TestDir & echo Created)"
```

出力例：

```
Deleted
```

または

```
Created
```

---

## 🔧 まとめ

| 方法              | コマンド                                       | 特徴             |
| --------------- | ------------------------------------------ | -------------- |
| **CMD版**        | `rd /s /q` + `mkdir`                       | 軽量で高速          |
| **PowerShell版** | `Remove-Item -Recurse -Force` + `New-Item` | ネットワークパスなどにも強い |
| **ログ付き版**       | `& echo ...` を追加                           | 状態確認が容易        |

---

💬 一般的には「削除も作成も1行で確実に済ませたい」場合、
PowerShell版のほうがフォルダごと・読み取り専用・隠し属性も含め安全に動きます。

どちらのバージョン（CMD or PowerShell）を採用しますか？
